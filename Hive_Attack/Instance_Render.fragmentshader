#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 instance_color;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 BaseColor;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1.0f,1.0f,1.0f);
	float LightPower = 50.0f;
	
	// Material properties
	//vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialDiffuseColor = instance_color;
	vec3 MaterialAmbientColor = vec3(0.5f,0.5f,0.5f) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(1.0f,1.0f,1.0f);

	float distance = 10;

	// Simulating two lights 
	vec3 light_1 = {10.0f,10.0f,0.0f};
	vec3 l_1 = normalize(light_1);

	vec3 light_2 = {-10.0f,10.0f,10.0f};
	vec3 l_2 = normalize(light_2);

	// REMOVED THIS FOR NOW TO LIGHT ALL HIVES EVENLY
	// Distance to the light
	//float distance = length( LightPosition_worldspace - Position_worldspace );
	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	//vec3 l = normalize( LightDirection_cameraspace  );
	
	float cosTheta = clamp( dot( n,l_1 ), 0,1 );
	float cosTheta_2 = clamp( dot( n,l_2 ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l_1,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	color.rgb = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		
		MaterialDiffuseColor * LightColor * LightPower * (cosTheta + cosTheta_2) / (distance*distance) +

		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

	color.a = 1.0;
}